{-   换一种思路看 m a -> (a->m b)

▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
                    a -> m b    实际上还是 a->b ，但这个结果过程 是带副作用的，  m b =  b + sideEffect 
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇                     

pure 函数的串联 就是简单的     f :: a-> b    g :: b-> c    h:: c->d
             pure 计算的承接（对结果持续操作）：      h . g. f           类型为 a -> d
▇▇ ▇▇ ▇▇ ▇▇ ▇▇▇▇ ▇▇▇▇ 而 计算过程 带副作用的 函数 的形式是 ：  f :: a -> m b        g :: b-> m c   h:: c -> m d
             带副作用的 计算的承接  ：               h =<< g  =<< f     类型为  a -> m d 

所以：  标准的串联 va -> f -> g -> h  的形式是   f va >>= g >>= h
                            对比 Pure 版本：   h . g . f va



  ▇▇ ▇▇ ▇▇ ▇▇ ▇▇▇▇ ▇▇▇▇ 如果是 一条龙 全部 一步一步基于运算的话， 就一串 >>= 就可以了   （这时候用do 写 反而很麻烦，

   而 do 写法，  默认是 每一行的action 的 结果是 后方不用的 。（除非自己 <- 取出来 ）
   

   如果 有的action 的结果要后方使用、有的不要，则 可以do + 某些action 的结果用<- 取出
     ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 实际上就是  >>=  和 >> 的混合（>>就是>>=来实现的） (以及通过 Lambda 绑定结果变量)

   如果 action1的结果不是 由action2使用的话， （而是由后面的action5, 5)
   那么   
     action1 >>= \r1 -> action2 >>= action3 ...
     
    翻译成do


-}
{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}

{-
do      (do 里面写承接的倒是很麻烦！！))
    tail    <- tailMay list
    maxtail <- maxMay tail     -- 本来前两行只要写   maxtail <- maxMay =<< tailMay list
    hea     <- headMay list
    divMay (fromInteger maxtail) (fromInteger hea)


▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 
【★☆★☆★☆★☆★☆★☆  结论：  只要是 基于同一个 m 的 Actions，都可以 写到 一块 ！】（只要它们确实发生的 过程是 那样的。）
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇
    结论： 前后承接的 多个actions 间 使用 bind >>=  将其 捆绑成一个大 Action
      而若  f  g  h 是 承接的
      但    j  k  l  也是承接、但不和上述 fgh 承接，
      那么现在要 启动 两个大 Action，【！！不要叫”串联“，先后顺序完全看你的业务需求】
      ___ 这时候不是用  >> then  ( >> 的语义是 刚才这块大的action 的结果不要了 )
      fgh >>= \r1 ->  jkl >>= \r2 -> {后续的Actions,可见r1,r2}。。。
      fgh    >>       jkl >>= \r2 ->    则 fgh 的结果就不使用了

▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇
【★☆★☆★☆★☆★☆★☆所以：什么时候用do :  do 默认就是 存在多个非承接的 Action 块！ -->  如果只有 一段 承接的几个actions，那用不着 do! 】
[所谓承接：  Action b 是在 Action a 的 产生结果 a 上继续运算， 则说 这两个 Action 是承接的。]
▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇            
-}