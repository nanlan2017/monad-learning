{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}
{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}
f_cps :: Int -> String -> (String -> r) -> r
f_cps i str k = k $ show i ++ str

ff_cps :: String -> Int -> (String -> r) -> r
ff_cps str i k = k $ show i ++ str

-- |▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 重大发现： 不用lambda 的话，前面的值会自动成为后面的参数！！！
-- v12 = ($ print) $ add_cps 2 3 $ f_cps "abc"  -- f_cps "abc"不是一个正确的调用-- 把 $ 后面看成一个整体 ： f_cps 的第一个参数需为 Int

-- ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
--  非CPS 风格的函数   Int -> String            
--  CPS 风格的函数     Int -> (String->r)->r
--      ▇★▇▇★▇▇★▇▇★▇ 两者的业务功能都是 ： 将 Int 计算得一个 String 值。 不同的是 这个 String 值是“怎么放的”
--      两者都可以作为continuation:      非 CPS 的作为continuation 时，会得到一个 value
--                                     CPS 作为continuation 时，会得到一个 suspended value |  一个

v12a :: (String -> r) -> r  -- ▇▇▇▇▇▇▇  suspended Int ---> to suspended String   (▇▇ CPS consumer)
                            --                       continuation 必然是 ::  Int -> (String->r)->r   （一个cps 风格的计算: 缺一个 Int 参数，运算出一个 String)
-- | (Int->r)->r   $   Int->(String->r)->r    ::   (String->r)->r     
-- 抽象为  (a->r)->r  $  a->(b->r)->r     ::  (b->r)->r          ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
--                                                              ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
--                                                              ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇        
v12a = add_cps 2 3 $ ff_cps "abc"
                -- 第一个suspended 的其实是一个 Int 值，后面的continuation肯定是 Int-> .... （这里是 ff_cps "abc" ::  Int->(String -> r) -> r )
                --                                                                      其 吸收a 值，并返回一个suspended computation 
                -- 
v12a1 :: IO ()  -- suspended Int + print （▇▇ Non-cps consumer)
v12a1 = ($ print) $ add_cps 2 3 $ ff_cps "abc"

v12a2 :: Int    -- suspended Int + (add 3)（▇▇ Non-cps consumer)
v12a2 = add_cps 2 3 $ add 3
{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}
{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}
{-▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃-}